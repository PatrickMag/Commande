' Gambas class file

Inherits ButtonBox
Export
Create Static

Public Enum commence_par, fini_par, contient        ''Comment se comporte le filtre sur les recherches
Public Enum Rien, EstRecherche, EstHisto            ''Definit quelle fenetre s'ouvre 
Public Enum EstText, EstNum, EstDate, EstDateTime   ''Definit quel type de données est pris en compte
'variables publics
Public dte As New LDate As "dte"
Public lke As Integer = contient      ''Indique à la requete comment doit se comporter le LIKE quand recherche = True avec les constantes commence_par, fini_par, contient ce dernier étant par défaut 
'variables privées
Private $value As Float
Private $text As String
Private $textesc As String
Private $nbdec As String
Private $reg As String
Private $typedonne As Integer
Private $regp As Boolean = False
Private $regex As New RegExp
Private $win As Window             ''Fenetre pour recherche
Private $grd As GridView          ''Gridview pour la recherche
Private $champ As String[]
Private $fichier As String
Private $rech As Boolean
Private $choirech As Integer
Private $y As Float
Private $x As Float
Private $objp As Object
Private $cond As String
Private $prop As ObjProp            ''propietes de me pour le fichier setting
Private $sca As Boolean              ''scanner peut être activé
Private $actsca As Boolean = False
Private $F11 As Boolean              ''scanner activé/désactivé
'constantes prédéfinies
Public Const all As String = ".*"       'tout est autorisé
Public Const path As String = "[a-zA-Z0-9_.+-@:&/]*" 'saisie d'un chemin avec protocol d'acces et credential
Public Const url As String = "[a-zA-Z0-9_.+-@:&!*'();:@=+$,/?#\\[\\]%]*" 'saisie d'une url ... a revoir
Public Const code As String = "[a-zA-Z0-9]*"           'saisie d'un code tel que supporté par Laurux
Public Const compte As String = "[0-9]*"               'saisie d'un compte à la main
Public Const num As String = "-?[0-9]*[,.]?[0-9]*"       'saisie d'un numérique avec ,
Public Const chaine As String = "[^%^_]*"                 'saisie d'une chaine en excluant les caractéres spéciaux de recherche BD (a compléter et vérifier)
Public Const mail As String = "[a-zA-Z0-9_.+-]+@?[a-zA-Z0-9.-]*"     'saisie d'une adresse mail peut certainement s'améliorer
Public Const dts As String = "[0-9]{0,2}[./-]?[0-9]{0,2}[./-]?[0-9]{0,4}"
Public Const dtst As String = "[0-9]{0,2}[./-]?[0-9]{0,2}[./-]?[0-9]{0,4}[ ]?[0-9]{0,2}[:]?[0-9]{0,2}"
Public Const nofilter As String = ".*" 
' a compléter si autre idées par ex : saisie des comptes client ...
'comme les paterns sont parfois un peu difficiles à trouver et à mettre au point il serait peut être bien de les mettres en constantes ?
' il ne faut pas mettre de caractéres obligatoires dans les paterns par ex dans mail @{1} ne fonctionne pas.
'propriétés
Public Const _Properties As String = "*,Value,Format,Type{TextReg.EstText;EstNum;EstDate;EstDateTime}=EstText,MaxLength,Text,recherche=False,condition,RechX,RechY,Choirech{TextReg.Rien;EstRecherche;EstHisto}=Rien,activescan=False,reg,recherche=False"
Public Const _DrawWith As String = "TextBox"

Property Value As Float       ''gére la valeur numérique de l'objet
'Property numerique As Boolean     ''si cette objet est que numérique
'Property Dat As Boolean               ''si cette objet est une date
Property Type As Integer             ''Définit le type de données à gérer, par défault EstText
Property nbdec As String            ''le nombre de décimal que contient cette objet
Property reg As String              ''le regex de cette objet. Il remplace la constante définie ci-dessus
Property MaxLength As Integer     '' longueur maximum de l'objet
Property Text As String     ''gére la valeur alfa de l'objet
Property recherche As Boolean   ''si on ouvre une fenetre de recherche
Property conteneur As Object    ''on passe le conteneur dans lequel on veut mettre la fenêtre
Property condition As String        ''si on veut rajouter une condition à la requete
Property RechX As Float             ''X de la fenetre de recherche
Property RechY As Float             ''Y de la fenetre de recherche
Property Champ As String[]          ''les champs à afficher dans la fenetre de recherche
Property Choirech As Integer        ''les choix sur ce qu'on affiche dans la fenetre de rechereche (historique ou recherche)
Property Name As String
Property AddTooltip As String       ''On ajoute un tooltip a l'existant
Property scanner As Boolean          ''On active/désactive la fonction scan par F11=> un retour chariot est inséré à la fin de la lecture du code barre
Property activescan As Boolean       ''On active par défault le mode scan 
Property connect As Connection Use $con

Public Sub _new()

  Dim obs As Observer
  
  obs = New Observer(Me) As "butb"
  Me.Picture = Picture["icon:/16/clear"]
  If Me.Tooltip Then Me.Tooltip &= "\n"
  Me.Tooltip &= "CTRL + Down Fenetre historique"
  $reg = chaine
  $regex.Compile($reg)

End

Public Sub _ready()

  $textesc = Me.Editor.Text

End

'gestion des évenements
Public Sub butb_click()

  If Me.Enabled = False Or Me.ReadOnly Then Return
 
  If Object.IsValid($grd) And If Last.tag = $grd.Tag Then
    If Last.row = -1 Then Return
    Me.Text = $grd[Last.Row, 0].Text
    FMain.De.SendKey("[Return]")
  Else
    $value = 0
    Me.text = ""
    If $rech Then affgrd()
  Endif
  
End

Public Sub butb_keypress()

  Dim ctrl As Boolean = Key.Control
  
  If ctrl Then
    Select Case Key.Code
      Case Key.Up
        If $rech Then 
          If ($choirech = EstHisto Or $choirech = rien) Then
            $choirech = EstRecherche
          Else
            If $choirech = EstRecherche Then $choirech = Rien
          Endif
          affwin(True)
        Endif
        Stop Event
      Case Key.Down
        If $choirech = EstHisto Then $choirech = rien Else $choirech = EstHisto
        affwin(True)
        Stop Event
      
    End Select
    Return
  Endif
  
  Select Case Key.Code
    Case Key.Esc
      $text = $textesc
      Me.Editor.Text = $textesc
    
    Case Key.F2
      If $typedonne = EstDate And (Me.Enabled Or Not Me.ReadOnly) Then
        Me.Editor.Text = LDateC.Select(dte).L
        $text = Me.Editor.Text
      Else If $typedonne = EstDateTime And (Me.Enabled Or Not Me.ReadOnly) Then
        Me.Editor.Text = LDateC.Select(dte).LT
        $text = Me.Editor.Text
      Endif
      
    Case Key.Enter, Key.Return, Key.Tab
      Select Case $choirech
        Case EstHisto
          If Key.Code = Key.tab Then 
            Me.Text = $grd[$grd.Row, 0].Text
            Stop Event
          Endif
        Case EstRecherche 
          If Object.IsValid($grd) And If $grd.Row > -1 Then Me.Text = $grd[$grd.Row, 0].Text
          Try $win.Delete
      End Select
      
    Case Key.Up
      If $choirech <> Rien And Object.IsValid($grd) Then
        If $grd.Row > 0 Then $grd.Select($grd.row - 1)
        Stop Event
      Endif
    
    Case Key.Down
      If $choirech <> Rien And Object.IsValid($grd) Then
        Stop Event
        If $grd.Row < $grd.Rows.Max Then $grd.Select($grd.row + 1)
      Endif

  End Select

End

Public Sub butb_KeyRelease()

  Dim shi As Boolean = Key.Normal
  
  If Key.Code = Key.ShiftKey Then $actsca = True
  If shi And $F11 And $actsca Then
    $actsca = False
    Desktop.SendKeys(("[Return]"))
    Return
  Endif
  
  If Key.Code = Key.F11 And $sca Then
    $F11 = Not $F11
  Endif

End

Public Sub butb_DblClick()
  
  If $typedonne = EstDate And (Me.Enabled Or Not Me.ReadOnly) Then
    Me.Editor.Text = LDateC.Select(dte).L
    $text = Me.Editor.Text
  Else If $typedonne = EstDateTime And (Me.Enabled Or Not Me.ReadOnly) Then
    Me.Editor.Text = LDateC.Select(dte).LT
    $text = Me.Editor.Text
  Endif
  
End

Public Sub butb_change()

  Dim x As Integer
  
  If IsNull(Me.Editor.Text) Then
    $text = ""
    $value = 0
    Return
  Endif
  Try $regex.Exec(Me.Editor.Text)
  If Error Then 
    Me.Editor.Text = $text
    Return
  Endif
  x = Me.Pos
  Me.Editor.Text = $regex.Text
  If Me.Editor.Text Match "." And $typedonne = EstNum Then Me.Editor.Text = Replace(Me.Editor.Text, ".", ",")
  $text = Me.Editor.Text
  If $rech And $choirech <> Rien Then affgrd()
  Me.pos = x
  
End

Public Sub butb_gotfocus()

  Dim i As Integer
  
  $prop = New ObjProp(Null, Me.Window.Name & "/" & Me.Name, ObjProp.Param)
  $prop.AppProp(Me)
  If $typedonne = EstNum And $value <> 0 Then
    Me.Editor.Text = Str($value)
  Endif
  $text = Me.Editor.Text
  $textesc = Me.Editor.Text
  affwin()

End

Public Sub butb_lostfocus()

  If $typedonne = EstNum Then
    If IsNull(Me.Editor.Text) Or Val($text) = Null Then
      $text = "0"
      Me.Editor.Text = "0"
      $textesc = "0"
      $value = 0
    Else
      $value = Val($text)
      If Not IsNull($nbdec) Then
        $text = Format($value, frm())
        Me.Editor.Text = $text
        $textesc = $text
      Endif
    Endif
  Endif
  If $typedonne = EstDate Then
    If Not IsNull(Me.Editor.Text) Then
      dte.L = Me.Editor.Text
      Me.Editor.Text = dte.L
      $text = dte.L
      $textesc = dte.L
    Endif
  Else If $typedonne = EstDateTime Then
    If Not IsNull(Me.Editor.Text) Then
      dte.LT = Me.Editor.Text
      Me.Editor.Text = dte.LT
      $text = dte.LT
      $textesc = dte.LT
    Endif
  Endif
  Try $prop.EcriParam(Me.Window.Name & "/" & Me.Name, Me)
  Try $win.Delete
  
End


Public Sub dte_change(dt As LDate)

  If $typedonne = EstDate Then 
    Me.Editor.Text = dt.L
  Else If $typedonne = EstDateTime Then
    Me.Editor.Text = dt.LT
  Endif

End

Private Function Value_Read() As Float

  If $typedonne = EstNum Then
    Return $value
  Else
    Return 0
  Endif

End
'proprietés
Private Sub Value_Write(Value As Float)

  If $typedonne = EstNum Then
    If IsNull(value) Then $value = 0 Else $value = Value
    If IsNull($nbdec) Then $text = Str($value) Else $text = Format($value, frm())
    Me.Editor.Text = $text
  Endif

End

Private Function Text_Read() As String

  Return Me.Editor.Text

End

Private Sub Text_Write(Value As String)

  If $typedonne = EstNum Then
    If IsNumber(value) Or IsNumber(Replace(value, ".", ",")) Then
      value = Replace(value, ".", ",")
      $value = Val(value)
    Else
      $value = 0
    Endif
    If Not IsNull($nbdec) Then $text = Format($value, frm()) Else $text = value
    Me.Editor.Text = $text
    Return
  Endif
  If $typedonne = EstDate Then
    $text = LDate(value).L
    dte.L = $text
    Me.Editor.Text = $text
    $value = 0
    Return
  Else If $typedonne = EstDateTime Then
    $text = LDate(value).LT
    dte.LT = $text
    Me.Editor.Text = $text
    $value = 0
    Return
  Endif
  
  Me.Editor.Text = value
  
End


Private Function nbdec_Read() As String

  Return $nbdec

End

Private Sub nbdec_Write(Value As String)

  $nbdec = value
  If $typedonne = EstNum And Val($text) <> Null Then
    $value = Val($text)
    If IsNull($nbdec) Then $text = Str($value) Else $text = Format($value, frm())
    Me.Editor.Text = $text
  Endif

End


Private Function reg_Read() As String

  Return $reg

End

Private Sub reg_Write(Value As String)

  $reg = value
  $regp = True
  $regex.Compile($reg)

End

Private Function MaxLength_Read() As Integer

  Return Me.Editor.Value

End

Private Sub MaxLength_Write(Value As Integer)

  Me.Editor.MaxLength = value

End

Private Function recherche_Read() As Boolean

  Return $rech

End

Private Sub recherche_Write(Value As Boolean)

  $rech = value
  If $rech Then Me.Tooltip &= "\nCTRL + Up Fenetre de recherche"

End

Private Function RechX_Read() As Float

  Return $x

End

Private Sub RechX_Write(Value As Float)

  $x = value

End

Private Function RechY_Read() As Float

  Return $y

End

Private Sub RechY_Write(Value As Float)

  $y = value

End

Private Function conteneur_Read() As Object

  Return $objp

End

Private Sub conteneur_Write(Value As Object)

  $objp = value

End

Private Function condition_Read() As String

  Return $cond

End

Private Sub condition_Write(Value As String)

  $cond = value

End

Public Sub butb_Mousewheel()

  Me.Editor.SetFocus

End

'fonctions publics
Public Sub Select(Optional start As Integer, length As Integer)
  
  If Start = 0 And length = 0 Then
    Me.Editor.SelectAll
    Return
  Endif
  
  Me.Editor.Select(start, length)
  
End

Public Sub Unselect()

  Me.Editor.Unselect

End

Public Sub champs(fichier As String, ...)   ''Le premier argument est le nom du fichier puis les champs que vous voulez voire dans le gridview. Le 1° champ sera celui retourné

  Dim ch As String
  
  $fichier = fichier
  $champ = Param.All

End

'fonctions privées
Private Function frm() As String
  
  Dim i As Integer
  Dim ch As String
  
  If Val($nbdec) = 0 Then Return "0"
  ch = "0."
  For i = 1 To Val($nbdec)
    ch &= "0"
  Next
  Return ch
End

Private Sub affwin(Optional change As Boolean = False)
  
  Dim i As Integer
  
  If change Then Try $win.Delete
  If Not Object.IsValid($win) And $choirech <> Rien Then
    If Object.IsValid($objp) Then 
      $win = New Window($objp) As "butb" 
      $win.x = $x
      If $y = -1 Then $win.Y = Me.y Else $win.Y = $y
    Else 
      $win = New Window(Me.Parent) As "butb"
      $win.x = Me.X
      $win.y = Me.y + Me.Height + 3
    Endif
    $win.Border = False
    $grd = New GridView($win) As "butb"
    $grd.Padding = 4
    $grd.Background = Color.White
    $grd.Height = Me.Font.Size * 15
    If $choirech = EstRecherche Then
      $grd.Width = (Me.Font.Size * $champ.Count * 15) 
      $grd.Columns.Count = $champ.Count 
      For i = 0 To $champ.Max
        $grd.Columns[i].Width = $grd.Width / $champ.Count
      Next
    Else
      $grd.Columns.Count = 1
      $grd.Width = (Me.Font.Size * 15) 
      $grd.Columns[0].Width = $grd.Width 
    Endif
    $grd.Rows.Height = Me.Font.Height + 3
    $win.Height = $grd.Height
    $win.Width = $grd.Width 
    $win.Show
    $win.TopOnly = True
    $grd.x = 0
    $grd.y = 0
    $grd.Mode = Select.Single
    $grd.Tag = 0
    $grd.Show
    affgrd
    $grd.Select(0)
  Else
    If $choirech = Rien Then Try $win.Delete
  Endif
  
End

Private Sub affgrd()
  
  Dim res As Result
  Dim i As Integer
  Dim value As String
  
  If Not Object.IsValid($win) Then Return
  If $choirech = EstHisto Then
    $grd.Columns.Count = 1
    $grd.Rows.Count = $prop.historique.Count
    For i = 0 To $prop.historique.Max
      $grd[i, 0].Text = $prop.historique[i]
    Next
  Else
    $grd.Columns.Count = $champ.Count 
    Select Case lke
      
      Case commence_par
        value = $text & "%"
      Case fini_par 
        value = "%" & $text
      Case contient
        value = "%" & $text & "%"
        
    End Select
    res = $con.Exec("SELECT " & $champ.Join() & " FROM " & $fichier & " WHERE " & $champ[0] & " LIKE &1 " & $cond, value)
    If res.Available Then
      $grd.Rows.Count = res.Count
      Repeat 
        For i = 0 To $champ.Max
          $grd[res.Index, i].Text = res[$champ[i]]
        Next
      Until res.MoveNext()
    Else
      $grd.Rows.Count = 0
      $grd.Clear
    Endif
  Endif
  Me.SetFocus
  
End

Private Function Champ_Read() As String[]

  Dim value As New String[]
  Dim i As Integer
  
  If Not $fichier Then Return Null
  value.Add($fichier)
  For i = 0 To $champ.Max
    value.Add($champ[i])
  Next
  Return value

End

Private Sub Champ_Write(Value As String[])

  Dim i As Integer
  
  $champ = New String[]
  $fichier = value[0]
  For i = 1 To value.Max
    $champ.Add(value[i])
  Next
  
End

Private Function Choirech_Read() As Integer

  Return $choirech

End

Private Sub Choirech_Write(Value As Integer)

  $choirech = value

End

Private Function Name_Read() As String

  Return Super.Name

End

Private Sub Name_Write(Value As String)

  Super.Name = value
  $prop = New ObjProp(Null, Me.Window.Name & "/" & Me.Name, ObjProp.Param)
  $prop.AppProp(Me)

End

Private Function Type_Read() As Integer

  Return $typedonne

End

Private Sub Type_Write(Value As Integer)

  If value <> $typedonne Then
    Select Case value
      Case EstText
        dte = Null
        value = 0
        If Not $regp Then $reg = chaine 
      Case EstNum
        If Not $regp Then $reg = num
        dte = Null
        If Val($text) <> Null Then
          $value = Val($text)
        Else 
          $value = 0
          $text = ""
        Endif
        Me.Editor.Text = $text
      Case EstDate
        If Not $regp Then $reg = dts
        Me.value = 0
        If $text Then dte.L = $text
        $text = dte.L
      Case EstDateTime
        If Not $regp Then $reg = dtst
        Me.value = 0
        If $text Then dte.LT = $text
        $text = dte.LT
    End Select
    $regex.Compile($reg)
    $typedonne = value
    Me.Editor.Text = $text
  Endif

End

Private Function AddTooltip_Read() As String

  Return Me.Tooltip

End

Private Sub AddTooltip_Write(Value As String)

  Me.Tooltip &= value

End

Private Function scanner_Read() As Boolean

  Return $sca

End

Private Sub scanner_Write(Value As Boolean)

  $sca = value
  If value Then
    If Me.Tooltip Not Match "F11 Activation du scanner" Then Me.AddTooltip = "\nF11 Activation du scanner"
  Endif

End

Private Function activescan_Read() As Boolean

  Return $F11

End

Private Sub activescan_Write(Value As Boolean)

  Me.scanner = value
  $F11 = value

End
