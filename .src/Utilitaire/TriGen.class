' Gambas class file

Create Static

Private NbEnreg As Integer = 0 ' Enregistrement de départ de la sélection
Private Col_Def As Collection
Private Col_Order As String[]
Private FilterRegex As Collection
Private Dbl As Boolean = False
Private Request As String
Private Tri As String
Private Group As String
Private Sel As String
Private Having As String
Private lg As Integer
Private cl As Integer
Private Coltri As GridView
Private Colfil As TextReg[]
Private Remonter As Button
Private Descendre As Button
Private Reset As Button
Private Count As ValueBox
Private Obj As Object
Private Parent As Object
Private CellHeight As Integer
Private Win As Window
Private Res As Result
Private where As String
Private has As String
Private Extra_sel As String
Private Extra_selcomb As String
Private Extra_have As String
Private Extra_havecomb As String
Private xoffset As Integer
Private policewidth As Integer = 10
Private prop As ObjProp
Private $nup As Boolean

Event MajSel(Bval As Variant)
Event Resize()
Event ReDim(w As Integer)
Event keyPress()
Event Raz()
Event Data(id As String, key As String, Data As _Gridview_Data)
Event Activate(Bval As Variant)

Property NoUp As Boolean 

'************************************** Gestion des Tris générique *****************************************************
Public Sub _new(Par As Object, Col As Collection, Resu As Result, Req As String, Height As Integer, Optional ob As Object = Null, GroupB As String)

  Dim i As Integer = 0
  Dim offset As Integer = 0
  Dim f As ObjProp
  Dim filter As TextReg
  Dim ch As Chainage
  Dim ObjPan As Object
  
  ch = New Chainage([])
  Parent = Par
  Res = Resu
  Request = Req
  If GroupB Then Group = "GROUP BY " & GroupB Else Group = ""
  If IsNull(Parent) Then
    Win = New Window
    Win.W = 800
    Win.H = 480
    Parent = New Form(Win)
    Parent.W = Win.ClientWidth
    Parent.H = Win.ClientHeight
    Parent.Visible = True
    Win.AutoResize = True
  Else
    For Each ObjPan In Parent.children
    Try ObjPan.Delete
    Next
  Endif
  Coltri = New GridView(Parent) As "Coltri"
  coltri.Mode = Select.Single
  Colfil = New TextReg[]
  Col_Order = New String[]
'  Coltri.Width = Parent.ClientWidth - 40
  Coltri.ScrollBar = Scroll.None
  CellHeight = Height
  cl = Col.Length
  Col_Def = Col
  FilterRegex = New Collection
  Tri = Col_Def[Col_Def.First].name
  Sel = ""
  Having = ""
  Extra_sel = ""
  Extra_selcomb = ""
  where = ""
  has = ""
  
  For Each f In Col_Def
    filter = New TextReg(Parent) As "Filter"
    filter.Name = f.NomControl
    filter.reg = TextReg.nofilter
    ch.add([filter])
    FilterRegex.Add("", Col_Def.Key)
    filter.Width = filter.Font.TextWidth("    " & Col_Def.Key) + filter.Picture.Width
    filter.Height = Height
    filter.X = offset
    filter.Y = 0
    If (filter.X + filter.Width > Parent.ClientWidth - 40) Then
      Coltri.ScrollBar = Scroll.Horizontal
    Endif
    offset = offset + filter.Width
    f.filter = filter
    If f.tri Then 
      Tri = f.name
    Endif
    filter.Show()
    Colfil.Add(filter)
    Col_Order.Add(Col_Def.Key)
  Next
'  filter.Width = filter.Width + Parent.ClientWidth - offset - 40 'optimize la taille pour le dernier champ
  Parent.Width = offset + 40
  Coltri.Width = offset
  
  Count = New ValueBox(Parent) As "Count"
  Count.W = 43
  Count.H = 16
  Count.Value = 0
  Count.Font = Font["Fixed, 8"]
  Count.Alignment = Align.Center
  Count.Show()
  
  
  If ob Then
    Obj = ob
  Else
    Obj = Parent
  Endif
  
  If Object.IsValid(Obj) Then
    Object.SetProperty(Obj, "Bsel", False)
    Object.SetProperty(Obj, "Bval", Null)
  Endif
  
  If Object.Type(Parent) <> "Panel" Then
    Try Parent.Center
  Endif
  
  Coltri.Columns.count = cl
  While (i < cl)
    Coltri.Columns[i].Width = Colfil[i].Width
    Inc i
  Wend 
  
  Coltri.MoveTo(0, 0)
  Coltri.SetFocus()
  xoffset = 0
  Try Coltri.Current.EnsureVisible
  Colfil[0].SetFocus
  For Each f In Col_Def
    If f.tri Then
      f.filter.SetFocus
      Break
    Endif
  Next

End

Public Sub _ready()

  Raise ReDim(Coltri.Width + 40)
  Remonter = New Button(Parent) As "Remonter"
  Descendre = New Button(Parent) As "Descendre"
  Reset = New Button(Parent) As "Reset"
  Refresh_Height()
  Reset.Text = "Raz"
  Reset.Tooltip = "Efface la selection des filtres"
  Remonter.Picture = Picture["icon:/22/up"]
  Remonter.Show()
  Descendre.Picture = Picture["icon:/22/down"]
  Descendre.Show()
  Reset.Show()

End

Public Sub Refresh_Height()
  
  Coltri.Rows.Height = CellHeight
  Coltri.Height = Parent.Height - CellHeight
  Coltri.X = 0
  Coltri.Y = CellHeight
  lg = Int(Coltri.Height / CellHeight) - 1
  Remonter.W = 16
  Descendre.W = 16
  Remonter.H = 56
  Descendre.H = 56
  Reset.W = 40 + 5
  Reset.H = CellHeight + 5
  Reset.X = coltri.Width + 3
  Remonter.X = coltri.Width + 3 
  Descendre.X = coltri.Width + 3
  Remonter.Y = Parent.ClientHeight / 2 - ((Parent.ClientHeight / (4 * Remonter.H)) * Remonter.H)
  Descendre.Y = Parent.ClientHeight / 2 + ((Parent.ClientHeight / (5 * Descendre.H)) * Descendre.H)
  Reset.Y = 0
  Count.X = coltri.Width + 4
  Count.Y = Remonter.Y + ((Descendre.Y - Remonter.Y) / 2) 
  Update()
  
End

Public Sub Show(Optional Modal As Boolean = False)
  
  If Win Then
    If Modal Then
      Win.ShowModal()
    Else
      Win.Show()
    Endif
  Endif
  
End

Public Sub Close(Selected_Value As Variant)

  Dim cancel As Boolean = False
  Dim f As TextReg

  If Object.IsValid(Obj) Then
    If Selected_Value Then
      Object.SetProperty(Obj, "Bsel", True)
      Object.SetProperty(Obj, "Bval", Selected_Value)
    Else
      Object.SetProperty(Obj, "Bsel", False)
      Object.SetProperty(Obj, "Bval", Null)
    Endif
    cancel = Raise MajSel(Selected_Value)
  Endif
  If Object.Type(Parent) <> "Panel" Then
    If Not cancel Then Parent.Close()
  Else
    If Not cancel Then
      Remonter.Delete()
      Descendre.Delete()
      Reset.Delete()
      For Each f In Colfil
        f.Delete()
      Next
      Colfil.Clear()
      Col_Order.Clear()
      Coltri.Delete()
    Endif
  Endif
  If Win Then
    If Not cancel Then Win.Close()
  Endif

End

Public Sub ExtraSel(Req As String, Comb As String)
  
  Extra_sel = Req
  Extra_selcomb = Comb
  NbEnreg = 0
  Update()
  
End

Public Sub ExtraHave(Req As String, Comb As String)
  
  Extra_have = Req
  Extra_havecomb = Comb
  NbEnreg = 0
  Update()
  
End

Public Sub GroupBy(Grp As String)
  
  Group = Grp
  NbEnreg = 0
  Update()
  
End

Public Sub Filter_GotFocus()

  If Last.Tag = Last.Text Then
    Last.Text = ""
  Endif
  Update()

End

Public Sub Filter_LostFocus()

  If Last.Text = "" Then
    Last.Text = Last.Tag  
  Endif
  Update()

End

Public Sub GenFilter()
  
  Dim f As String
  
  Sel = ""
  Having = ""
  For Each f In FilterRegex
    f = Replace(f, "\"", "")
    If f Then
      'I find only this way to distingish between original columns and group by results is to look on field name
      If Col_Def[FilterRegex.key].name Match "parse_having_" Then
        Having &= Col_Def[FilterRegex.key].name & " like \"%" & f & "%\" and "
      Else
        sel &= Col_Def[FilterRegex.key].name & " like \"%" & f & "%\" and "
      Endif
    Endif
  Next
  If Sel Then
    Sel = Left(Sel, Len(Sel) - 5)
  Endif
  If Having Then
    Having = Left(Having, Len(Having) - 5)
  Endif
  NbEnreg = 0
  Update()

End

Public Sub Filter_Change()

  If Last.Tag <> Last.Text Then
    FilterRegex.Remove(Last.Tag)
    FilterRegex.Add(Last.Text, Last.Tag)
  Endif
  GenFilter()
  
End

Public Sub Filter_DblClick()

  If Not Dbl Then
    Dbl = True
  Else
    Dbl = False
  Endif
  Tri = Col_Def[Last.Tag].name  
  Update()

End

Public Sub Filter_KeyPress()

  Dim ctrl As Boolean = Key.Control

  If ctrl Then
    If Key.Code = Key["p"] Or Key.Code = Key["P"] Then imprime()
  Endif
  
  If Key.Code = Key.Esc Then Close(Null) 
  If Key.Code = Key.Down Then 
    Stop Event
    If coltri.Rows.Count > 0 Then
     coltri.SetFocus
     coltri.Select
    Else
      Return
    Endif
  Endif
  
End

Public Sub Refresh_Data()

  coltri.Refresh()
  Wait 0.001

End

Public Sub Coltri_Data(Row As Integer, Column As Integer)

  
  Dim Frmt As New String[]
  Dim Frmt2 As String[]
  Dim cancel As Boolean
  Dim idx As String = ""
  
  Res.MoveTo(Row)
  If Res.Available Then
    Try Coltri.data.Text = Str(Res[Col_Def[Col_Order[Column]].name])
    Try idx = Str(Res[Col_Def[Col_Order[0]].name])
    cancel = Raise Data(idx, Col_Order[Column], Coltri.Data)
    If cancel Then Return
    Col_Def[Col_Order[Column]].AppProp(coltri.Data)
    If Res.Fields.Exist("bgcolor") Then
      If Res["bgcolor"] <> Null Then
        Coltri.Data.Background = Val(Res["bgcolor"])
      Endif
    Else
      If Even(row) Then Coltri.Data.Background = Color.White Else Coltri.Data.Background = Color.Background
    Endif
  Endif

End

Public Sub Coltri_Click()

  Dim cle As String
  Dim colret As New Collection
  Dim ok As Boolean
  Dim i As Integer
  
  If coltri.row = -1 Then Return
  For i = 0 To Col_Order.Max
    If Col_Def[Col_Order[i]].cle Then
      colret.Add(coltri[coltri.Row, i].Text, Col_Def[Col_Order[i]].name)
      ok = True
    Endif
  Next
  If ok Then
    Close(colret)
  Else
    Close(coltri[coltri.row, 0].Text)
  Endif

End


Public Sub Coltri_KeyPress()

  Dim cancel As Boolean = False
  Dim ctrl As Boolean = Key.Control

  cancel = Raise keyPress()
  If cancel Then Return
  If ctrl Then
    If Key.Code = Key["p"] Or Key.Code = Key["P"] Then imprime()
  Endif
  If Key.code = Key.Enter Or Key.code = Key.Return Then
    Coltri_Click()
  Endif
  If Key.code = Key.Up Then
    If Coltri.Row = 0 Then
      Remonter_Click()
    Endif
  Endif
  If Key.code = Key.down Then
    If Coltri.Row = lg - 1 Then
      Descendre_Click()
    Endif
  Endif
  If Key.code = Key.PageDown Then
    Descendre_Click()
  Endif

  If Key.code = Key.PageUp Then
    Remonter_Click()
  Endif
  If Key.code = Key.F2 Then
    cancel = Raise Resize()
    If Not cancel Then
      Refresh_Height()
    Endif
  Endif
  If Key.code = Key.Escape Then
    Close(Null)
  Endif

End

Public Sub Coltri_MouseWheel()

  If mouse.Delta <= -1 Then
    If Coltri.Rows.Count = lg Then NbEnreg = NbEnreg + lg
    Update()
  Else If mouse.Delta >= 1 Then
    If Coltri.Rows.Count <= lg Then NbEnreg = NbEnreg - lg
    Update()
  Endif

End


Public Sub Coltri_Scroll()
  
  Dim f As TextReg
  Dim x As Integer
  
  x = xoffset - Coltri.ScrollX
  xoffset = Coltri.ScrollX
  
  For Each f In Colfil
    f.X = f.X + x
  Next
  
End

Public Sub Coltri_Activate()

  Dim cle As String
  Dim colret As New Collection
  Dim ok As Boolean
  Dim i As Integer
  
  If coltri.row = -1 Then Return
  For i = 0 To Col_Order.Max
    If Col_Def[Col_Order[i]].cle Then
      colret.Add(coltri[coltri.Row, i].Text, Col_Def[Col_Order[i]].name)
      ok = True
    Endif
  Next
  If ok Then
    Raise Activate(colret)
  Else
    Raise Activate(coltri[coltri.row, 0].Text)
  Endif
  
End

Public Sub Descendre_Click()

  If Coltri.Rows.Count = lg Then
    NbEnreg = NbEnreg + lg
    Update()
  Endif
  Try Coltri.MoveTo(0, 0)
  Try Coltri.Current.EnsureVisible
  Try Coltri.SetFocus

End

Public Sub Remonter_Click()

  NbEnreg = NbEnreg - lg
  Update()
  Try Coltri.MoveTo(0, 0)
  Try Coltri.Current.EnsureVisible
  Try Coltri.SetFocus

End

Public Sub Descendre_KeyPress()

  If Key.code = Key.Escape Or Key.code = Key.F2 Then
    Close(Null)
  Endif
  If key.code = key.PageDown Then Descendre_Click()
  If key.code = key.PageUp Then Remonter_Click()

End

Public Sub Remonter_KeyPress()

  If Key.code = Key.Escape Or Key.code = Key.F2 Then
    Close(Null)
  Endif
  If key.code = key.PageDown Then Descendre_Click()
  If key.code = key.PageUp Then Remonter_Click()

End

Public Sub Reset_Click()

  Dim f As TextReg
  Dim cancel As Boolean = False
  
  cancel = Raise Raz()
  If cancel Then Return
  
  For Each f In Colfil
    f.Text = f.Tag
    FilterRegex.Remove(f.Tag)
    FilterRegex.Add("", f.Tag)
  Next
  Tri = Col_Def[Col_Def.First].name
  Dbl = False
  GenFilter()
  
End

Public Sub Count_Change()

  If Count.Value < 0 Then
    NbEnreg = 0
  Else
    NbEnreg = Count.Value
  Endif
  Update()
  
End

Public Sub GetAllFiltered() As Result
  
  Dim sel_comb As String
  Dim have_comb As String
  Dim rRes As Result

  If Extra_sel <> Null And Sel <> Null Then
    sel_comb = Extra_selcomb
  Endif
  If Extra_have <> Null And Having <> Null Then
    have_comb = Extra_havecomb
  Endif

  If Parent Then
    Parent.mouse = mouse.Wait
  Endif

  rRes = FMain.con.db.Exec(Request & where & Extra_sel & " " & sel_comb & " " & Sel & " " & Group & " " & has & Extra_have & " " & have_comb & " " & Having & " order by " & Tri)

  If Parent Then
    Parent.mouse = mouse.Default
  Endif

  Return rRes
  
End

Public Sub Update()

  Dim Rescnt As Result
  'Dim TimeExec As Date
  'Dim TimeLong As Integer
  
  If NbEnreg < 0 Then NbEnreg = 0
  Count.Value = NbEnreg
  
  If Sel Or Extra_sel Then
    where = " where "
  Else
    where = ""
  Endif
  If Having Or Extra_have Then
    has = " having "
  Else
    has = ""
  Endif

  If $nup Then Return
  
  'TimeExec = Now

  If Dbl = True Then
    DB_Decr()
  Else
    DB_Incr()
  Endif

End

Public Sub DB_Incr()

  Dim sel_comb As String
  Dim have_comb As String

  If Extra_sel <> Null And Sel <> Null Then
    sel_comb = Extra_selcomb
  Endif
  If Extra_have <> Null And Having <> Null Then
    have_comb = Extra_havecomb
  Endif

  Res = FMain.con.Exec(Request & where & Extra_sel & " " & sel_comb & " " & Sel & " " & Group & " " & has & Extra_have & " " & have_comb & " " & Having & " order by " & Tri & " limit " & NbEnreg & ", " & lg & "")
  If Res.Available Then
    If Res.count <> 0 Then
        Coltri.rows.Count = Res.count
    End If
  Else
    Coltri.rows.Count = 0
  End If
  Coltri.Refresh

End

Public Sub DB_Decr()

  Dim sel_comb As String
  Dim have_comb As String

  If Extra_sel <> Null And Sel <> Null Then
    sel_comb = Extra_selcomb
  Endif
  If Extra_have <> Null And Having <> Null Then
    have_comb = Extra_havecomb
  Endif

  Res = FMain.con.Exec(Request & where & Extra_sel & " " & sel_comb & " " & Sel & " " & Group & " " & has & Extra_have & " " & have_comb & " " & Having & " order by " & Tri & " desc limit " & NbEnreg & ", " & lg & "")
  If Res.Available Then
    If Res.count <> 0 Then
        Coltri.rows.Count = Res.count
    End If
  End If
  Coltri.Refresh

End

Public Sub imprime()        ''imprime la sélection
  
  Dim rep As New Report
  Dim pan As ReportPanel
  Dim lab As ReportLabel
  Dim filter As TextReg
  Dim obj As ObjProp
  Dim w As New String[]
  Dim i As Integer
  Dim t As String
  
  pan = New ReportPanel(rep)
  pan.Fixed = True
  pan.Height = "5mm"
  pan.Border = ReportBorder["Top:1pt #000000;Bottom:1pt #000000;Left:1pt #000000;Right:1pt #000000"]
  pan.Arrangement = Arrange.Horizontal
  For Each filter In Colfil
    lab = New ReportLabel(pan)
    lab.Text = filter.Text
    lab.Font = Font["Serif, 8"]
    lab.Border = ReportBorder["Right:1pt #000000"]
    t = Str(Round(220 * (filter.w / coltri.W), 0)) & "mm"
    w.Add(t)
    lab.Width = w.Last
  Next
  
  Res.MoveFirst()
  Repeat
    pan = New ReportPanel(rep)
    pan.Height = "3mm"
    pan.Arrangement = Arrange.Horizontal
    i = 0
    For Each obj In Col_Def
      lab = New ReportLabel(pan)
      lab.Font = Font["Serif, 5"]
      lab.Width = w[i]
      lab.Height = "3mm"
      If obj.name Then
        lab.Alignment = Coltri[Res.Index, i].Alignment
        lab.Text = Coltri[Res.Index, i].Text
        i += 1
      Endif
    Next
  Until Res.MoveNext()
  rep.Preview()
End

Public Sub FontSize(Increment As Float)
  
  Dim fts As Float
  Dim f As ObjProp
  
  If Parent Then
    fts = Parent.Font.Size
  Else
    fts = Me.Font.Size
  Endif
  
  'Reduce or Increment font in TriGen
  Coltri.Font.Size = Coltri.Font.Size + Increment
  For Each f In Col_Def
    f.filter.Font.Size = f.filter.Font.Size + Increment
  Next
  
End


Sub NoUp_Read() As Boolean

  Return $nup
  
End

Sub NoUp_Write(nup As Boolean)

  Dim f As ObjProp
  
  If nup Then
    For Each f In Col_Def
      Object.Lock(f)
      Object.Lock(f.filter)
      Object.Lock(Coltri)
    Next
  Else
    For Each f In Col_Def
      Object.UnLock(f)
      Object.UnLock(f.filter)
      Object.UnLock(Coltri)
    Next
  Endif
  $nup = nup

End

